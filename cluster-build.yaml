---
- hosts: configure
  become: true
  vars_files:
    - vars/vars.yaml

  handlers:
    - name: Reload sysctl configuration
      command: sysctl --system

  tasks:
    - name: Disable swap for current session
      command: swapoff -a
 
    - name: Disable swap permanently, persist reboots
      lineinfile:
        path: /etc/fstab
        state: absent
        regexp: '^/swap'
 
    - name: Copy containerd.conf to /etc/modules-load.d/
      template:
        src: templates/containerd.conf.j2
        dest: /etc/modules-load.d/containerd.conf
 
    - name: Load kernel modules overlay and br_netfilter
      command: modprobe {{ item }}
      with_items:
        - overlay
        - br_netfilter
 
    - name: Copy kubernetes.conf to /etc/sysctl.d/
      template:
        src: templates/iptables.conf.j2
        dest: /etc/sysctl.d/kubernetes.conf
      notify: Reload sysctl configuration
 
    - name: Add Docker APT repository key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
 
    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
 
    - name: Install containerd.io package
      apt:
        name: containerd.io
        state: present
 
    - name: create containerd directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
 
    - name: adding containerd default config
      command: containerd config default
      register: containerd_default_config
      changed_when: false
 
    - name: Save containerd default config to a file
      copy:
        content: "{{ containerd_default_config.stdout }}"
        dest: /etc/containerd/config.toml
 
    - name: Modify containerd configuration
      replace:
        path: /etc/containerd/config.toml
        regexp: '.*SystemdCgroup = false$'
        replace: 'SystemdCgroup = true'
 
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
 
    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted
        enabled: yes
 
    - name: Update apt cache
      apt:
        update_cache: yes
      ignore_errors: yes
 
    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
 
    - name: Download Kubernetes GPG key
      shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.27/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
 
    - name: Ensure kubernetes.list file exists
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: touch
        mode: '0644'
 
    - name: Ensure kubernetes.list file exists and contains the repository line
      lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.27/deb/ /'
 
    - name: Update apt cache
      apt:
        update_cache: yes
      ignore_errors: yes
 
    - name: Install Kubernetes packages
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - "kubelet"
        - "kubeadm"
        - "kubectl"
        - "kubernetes-cni"
 
    - name: Hold packages
      apt:
        name: "{{ item }}"
        state: held
      with_items:
        - kubelet
        - kubeadm
        - kubectl
      ignore_errors: yes
 
    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: started
 
    - name: Enable IP forwarding
      shell: echo '1' > /proc/sys/net/ipv4/ip_forward
 
    - name: Run kubeadm init on master node
      when: inventory_hostname in groups['master']
      command: kubeadm init
      ignore_errors: yes
 
    - name: Execute kubeadm token create command
      when: inventory_hostname in groups['master']
      command: kubeadm token create --print-join-command
      register: join_command_output
 
    - name: debug
      when: inventory_hostname in groups['worker']
      command: "{{hostvars[groups['master'].0].join_command_output.stdout}}"

